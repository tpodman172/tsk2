openapi: "3.0.0"
info:
  version: 1.0.0
  title: tsk2 todo
  license:
    name: MIT
servers:
  - url: http://{environment}:{port}/
    variables:
      environment:
        default: localhost    # Development server
        enum:
          - api.tsk2.me # Production server
          - localhost   # Development server
      port:
        default: 8080    # Development server
        enum:
          - 80     # Production server
          - 8080   # Development server
paths:
  /health:
    get:
      summary: health check
      operationId: healthCheck
      tags:
        - health
      responses:
        '200':
          description: OK
  /login:
    post:
      description: login
      operationId: postLogin
      tags:
        - login
      requestBody:
        content:
          application/json:
            schema:
              $ref: #/components/schema/LoginDTO
      responses:
        '204':
          description: success
  /tasks:
    options:
      tags:
        - tasks
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
    get:
      summary: List all tasks
      operationId: getTasks
      tags:
        - tasks
      responses:
        '200':
          description: A paged array of tasks
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TasksDTO"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - tasks
      description: やることの登録
      operationId: postTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreateDTO'
      responses:
        '201':
          description: やることの作成成功
          content:
            application/json:
              schema:
                type: integer
                format: int64
  /tasks/{id}:
    delete:
      tags:
        - tasks
      description: やることの削除
      operationId: taskDelete
      parameters:
        - name: id
          in: path
          required: true
          description: tasks id
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: delete success
  /task/achievement/{date}:
    get:
      summary: get task challenge result by date
      operationId: getAchievement
      tags:
        - tasks
      parameters:
        - name: date
          in: path
          required: false # todo 未指定の場合は全部とる実装
          description: target date. [wip]When not specified, all challenge result returned.
          schema:
            type: string
            format: date
            example: '2020-05-01'
      responses:
        '200':
          description: array of task challenge result
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AchievementDTO"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /task/{id}/achievement :
    put:
      summary: update task status
      operationId: putAchievement
      tags:
        - tasks
      parameters:
        - name: id
          in: path
          required: true
          description: task id
          schema:
            type: integer
            format: int64
        - name: targetDate
          in: query
          required: true
          description: target date
          schema:
            type: string
            format: date
            example: '2020-05-03'
        - name: completed
          in: query
          required: true
          description: task completed
          schema:
            type: boolean
      responses:
        '204':
          description: update success # todo return update content
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    LoginDTO:
      required:
        - id
        - password
      properties:
        id:
          type: string
        password:
          type: string
    TaskDTO:
      required:
        - id
        - title
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
    TasksDTO: # todo TasksDTOいる？
      type: array
      items:
        $ref: "#/components/schemas/TaskDTO"
    TaskCreateDTO:
      required:
        - title
      properties:
        title:
          type: string
    AchievementDTO:
      required:
        - taskId
        - targetDate
        - completed
      properties:
        taskId:
          type: integer
          format: int64
        targetDate:
          type: string
          format: date
          example: '2020-05-03'
        completed:
          type: boolean
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Credentials or access token for API
security:
  - Bearer: []
