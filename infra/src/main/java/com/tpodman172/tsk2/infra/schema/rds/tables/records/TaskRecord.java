/*
 * This file is generated by jOOQ.
 */
package com.tpodman172.tsk2.infra.schema.rds.tables.records;


import com.tpodman172.tsk2.infra.schema.rds.enums.TaskCycleType;
import com.tpodman172.tsk2.infra.schema.rds.tables.Task;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskRecord extends UpdatableRecordImpl<TaskRecord> implements Record6<Long, Long, String, TaskCycleType, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = -1226480411;

    /**
     * Setter for <code>tsk2.task.task_id</code>.
     */
    public void setTaskId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>tsk2.task.task_id</code>.
     */
    public Long getTaskId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>tsk2.task.user_id</code>.
     */
    public void setUserId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>tsk2.task.user_id</code>.
     */
    public Long getUserId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>tsk2.task.title</code>.
     */
    public void setTitle(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>tsk2.task.title</code>.
     */
    public String getTitle() {
        return (String) get(2);
    }

    /**
     * Setter for <code>tsk2.task.cycle_type</code>.
     */
    public void setCycleType(TaskCycleType value) {
        set(3, value);
    }

    /**
     * Getter for <code>tsk2.task.cycle_type</code>.
     */
    public TaskCycleType getCycleType() {
        return (TaskCycleType) get(3);
    }

    /**
     * Setter for <code>tsk2.task.created_at</code>.
     */
    public void setCreatedAt(LocalDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>tsk2.task.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>tsk2.task.updated_at</code>.
     */
    public void setUpdatedAt(LocalDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>tsk2.task.updated_at</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, String, TaskCycleType, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<Long, Long, String, TaskCycleType, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Task.TASK.TASK_ID;
    }

    @Override
    public Field<Long> field2() {
        return Task.TASK.USER_ID;
    }

    @Override
    public Field<String> field3() {
        return Task.TASK.TITLE;
    }

    @Override
    public Field<TaskCycleType> field4() {
        return Task.TASK.CYCLE_TYPE;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return Task.TASK.CREATED_AT;
    }

    @Override
    public Field<LocalDateTime> field6() {
        return Task.TASK.UPDATED_AT;
    }

    @Override
    public Long component1() {
        return getTaskId();
    }

    @Override
    public Long component2() {
        return getUserId();
    }

    @Override
    public String component3() {
        return getTitle();
    }

    @Override
    public TaskCycleType component4() {
        return getCycleType();
    }

    @Override
    public LocalDateTime component5() {
        return getCreatedAt();
    }

    @Override
    public LocalDateTime component6() {
        return getUpdatedAt();
    }

    @Override
    public Long value1() {
        return getTaskId();
    }

    @Override
    public Long value2() {
        return getUserId();
    }

    @Override
    public String value3() {
        return getTitle();
    }

    @Override
    public TaskCycleType value4() {
        return getCycleType();
    }

    @Override
    public LocalDateTime value5() {
        return getCreatedAt();
    }

    @Override
    public LocalDateTime value6() {
        return getUpdatedAt();
    }

    @Override
    public TaskRecord value1(Long value) {
        setTaskId(value);
        return this;
    }

    @Override
    public TaskRecord value2(Long value) {
        setUserId(value);
        return this;
    }

    @Override
    public TaskRecord value3(String value) {
        setTitle(value);
        return this;
    }

    @Override
    public TaskRecord value4(TaskCycleType value) {
        setCycleType(value);
        return this;
    }

    @Override
    public TaskRecord value5(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public TaskRecord value6(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public TaskRecord values(Long value1, Long value2, String value3, TaskCycleType value4, LocalDateTime value5, LocalDateTime value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TaskRecord
     */
    public TaskRecord() {
        super(Task.TASK);
    }

    /**
     * Create a detached, initialised TaskRecord
     */
    public TaskRecord(Long taskId, Long userId, String title, TaskCycleType cycleType, LocalDateTime createdAt, LocalDateTime updatedAt) {
        super(Task.TASK);

        set(0, taskId);
        set(1, userId);
        set(2, title);
        set(3, cycleType);
        set(4, createdAt);
        set(5, updatedAt);
    }
}
