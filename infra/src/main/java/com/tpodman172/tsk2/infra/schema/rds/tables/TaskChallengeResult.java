/*
 * This file is generated by jOOQ.
 */
package com.tpodman172.tsk2.infra.schema.rds.tables;


import com.tpodman172.tsk2.infra.schema.rds.Indexes;
import com.tpodman172.tsk2.infra.schema.rds.Keys;
import com.tpodman172.tsk2.infra.schema.rds.Tsk2;
import com.tpodman172.tsk2.infra.schema.rds.tables.records.TaskChallengeResultRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskChallengeResult extends TableImpl<TaskChallengeResultRecord> {

    private static final long serialVersionUID = 1384479734;

    /**
     * The reference instance of <code>tsk2.task_challenge_result</code>
     */
    public static final TaskChallengeResult TASK_CHALLENGE_RESULT = new TaskChallengeResult();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskChallengeResultRecord> getRecordType() {
        return TaskChallengeResultRecord.class;
    }

    /**
     * The column <code>tsk2.task_challenge_result.task_id</code>.
     */
    public final TableField<TaskChallengeResultRecord, Long> TASK_ID = createField(DSL.name("task_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>tsk2.task_challenge_result.target_date</code>.
     */
    public final TableField<TaskChallengeResultRecord, LocalDate> TARGET_DATE = createField(DSL.name("target_date"), org.jooq.impl.SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>tsk2.task_challenge_result.completed</code>.
     */
    public final TableField<TaskChallengeResultRecord, Boolean> COMPLETED = createField(DSL.name("completed"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>tsk2.task_challenge_result.created_at</code>.
     */
    public final TableField<TaskChallengeResultRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>tsk2.task_challenge_result.updated_at</code>.
     */
    public final TableField<TaskChallengeResultRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>tsk2.task_challenge_result</code> table reference
     */
    public TaskChallengeResult() {
        this(DSL.name("task_challenge_result"), null);
    }

    /**
     * Create an aliased <code>tsk2.task_challenge_result</code> table reference
     */
    public TaskChallengeResult(String alias) {
        this(DSL.name(alias), TASK_CHALLENGE_RESULT);
    }

    /**
     * Create an aliased <code>tsk2.task_challenge_result</code> table reference
     */
    public TaskChallengeResult(Name alias) {
        this(alias, TASK_CHALLENGE_RESULT);
    }

    private TaskChallengeResult(Name alias, Table<TaskChallengeResultRecord> aliased) {
        this(alias, aliased, null);
    }

    private TaskChallengeResult(Name alias, Table<TaskChallengeResultRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TaskChallengeResult(Table<O> child, ForeignKey<O, TaskChallengeResultRecord> key) {
        super(child, key, TASK_CHALLENGE_RESULT);
    }

    @Override
    public Schema getSchema() {
        return Tsk2.TSK2;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TASK_CHALLENGE_RESULT_PRIMARY);
    }

    @Override
    public UniqueKey<TaskChallengeResultRecord> getPrimaryKey() {
        return Keys.KEY_TASK_CHALLENGE_RESULT_PRIMARY;
    }

    @Override
    public List<UniqueKey<TaskChallengeResultRecord>> getKeys() {
        return Arrays.<UniqueKey<TaskChallengeResultRecord>>asList(Keys.KEY_TASK_CHALLENGE_RESULT_PRIMARY);
    }

    @Override
    public List<ForeignKey<TaskChallengeResultRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TaskChallengeResultRecord, ?>>asList(Keys.TASK_CHALLENGE_RESULT_IBFK_1);
    }

    public Task task() {
        return new Task(this, Keys.TASK_CHALLENGE_RESULT_IBFK_1);
    }

    @Override
    public TaskChallengeResult as(String alias) {
        return new TaskChallengeResult(DSL.name(alias), this);
    }

    @Override
    public TaskChallengeResult as(Name alias) {
        return new TaskChallengeResult(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskChallengeResult rename(String name) {
        return new TaskChallengeResult(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskChallengeResult rename(Name name) {
        return new TaskChallengeResult(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, LocalDate, Boolean, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
